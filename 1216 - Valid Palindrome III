//https://leetcode.com/problems/valid-palindrome-iii/description/
//https://leetcode.ca/2019-03-30-1216-Valid-Palindrome-III/

int isValidPalindrome(string str, int k) {
    int n = str.length();
    vector<vector<int>> dp(n, vector<int>(n, 0));
    for(int i=0; i<n; i++) {
        dp[i][i] = 1;
    }
    for(int i=n-2; i>=0; i--) {
        for(int j=i+1; j<n; j++) {
            if(str[i] == str[j]) {
                dp[i][j] = dp[i+1][j-1]+2;
            } else {
                dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
            }
            if(dp[i][j]+k >= n) {
                return true;
            }
        }
    }
    
    // for(int i=0; i<n; i++) {
    //     for(int j=0; j<n; j++) {
    //         cout<<dp[i][j]<<" ";
    //     }
    //     cout<<"\n";
    // }
    
    return false;
}


int main() {
    string str = "abcdeca";
    int k = 2;
    bool res = isValidPalindrome(str, k);
    cout<<res<<"\n";
}
