//https://leetcode.com/discuss/interview-question/5804713/Google-or-L4-or-Bangalore-or-Rejected

/*
I was given a binary matrix and asked to find the upper-left corner of the largest square of 1's. The follow-up question was: What if we are allowed to switch at most k zeros to 1's?


*/



int solve(vector<vector<int>> matrix, int k) {
    int n = matrix.size();
    vector<vector<pair<int, int>> A(n);
    
    for(int i=0; i<n; i++) {
        for(j=0; j<n; j++) {
            A[i].push_back({0, 0});
        }
    }
    
    if(matrix[0][0] == 1)   A[0][0] = {0, 1};
    else    A[0][0] = {1, 0};
    
    for(int i=1; i<n; i++) {
       if(matrix[i][0] == 0) {
           A[i][0] = {A[i-1][0].first+1, A[i-1][0].second};
       } else {
           A[i][0] = {A[i-1][0].first, A[i-1][0].second+1};
       }
    }
    
    for(int j=0; j<n; j++) {
        if(matrix[0][j] == 0) {
            A[0][j] = {A[0][j-1].first+1, A[0][j-1].second};
        } else {
            A[0][j] = {A[0][i-1].first, A[0][j-1].second+1};
        }
    }
    
    for(int i=1; i<n; i++) {
        for(int j=1; j<n; j++) {
            A[0][j] = {A[]}
        }
    }
}

int main() {
    vector<vector<int>> matrix = {{1, 0, 1, 0, 0}, {1, 0, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 0, 1, 0}, {0, 1, 1, 1, 0}};
    int k = 2;
    int res = solve(matrix, k);
    cout<<res<<"\n";
}
